# Build and test ASP.NET projects.
# NB: Needs OWASP Dependency checker task which has to be added to Azure Devops from the marketplace
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger:
  - master

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

stages: 
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: NuGetToolInstaller@1
      displayName: 'Use NuGet 4.4.1'
      inputs:
        versionSpec: 4.4.1
    
    - task: NuGetCommand@2
      displayName: 'Restore NuGet Packages'
      inputs:
        restoreSolution: '$(solution)'
    
    - task: VSBuild@1
      displayName: 'Build solution'
      inputs:
        solution: '$(solution)'
        msbuildArgs: '/p:OutDir=$(build.stagingDirectory) /p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
    
    - task: VSTest@2
      displayName: 'Run Unit tests'
      inputs:
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
        pathtoCustomTestAdapters: '$(build.sourcesdirectory)/packages/NUnit3TestAdapter.3.16.1/build/net35/'
        testAssemblyVer2: |
          **\SecurityEssentials.Unit.Tests.dll
          !**\*TestAdapter.dll
          !**\obj\**'
        searchFolder: '$(Build.SourcesDirectory)'
        runInParallel: true
        codeCoverageEnabled: true
        diagnosticsEnabled: True

    - task: dependency-check-build-task@5
      displayName: 'OWASP Dependency Checker'
      inputs:
        projectName: 'Security Essentials'
        scanPath: '$(build.stagingDirectory)/**/bin'
        format: 'HTML'         

    - task: PublishSymbols@1
      displayName: 'Publish symbols path'
      inputs:
        SearchPattern: '**\bin\**\*.pdb'
    
    - task: CopyFiles@2
      displayName: 'Copy Application Files to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(build.sourcesdirectory)'
        Contents: '**\\bin\\$(BuildConfiguration)\\**'
        TargetFolder: '$(build.artifactstagingdirectory)'
    
    - task: CopyFiles@2
      displayName: 'Copy Test Adapter to $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(build.sourcesdirectory)\packages\NUnit3TestAdapter.3.16.1\'
        TargetFolder: '$(build.artifactstagingdirectory)\Tests\NUnit3TestAdapter.3.16.1\'
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'

- stage: Test
  dependsOn: Build
  jobs:
  - deployment: DeployWeb
    pool:
      vmImage: 'windows-latest'
    # creates an environment if it doesnâ€™t exist
    environment: 'integration'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: echo Test
    # TODO: Deploy an instance to Azure and then run integration tests against it