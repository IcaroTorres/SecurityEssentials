# Build and test ASP.NET projects.
# NB: Needs OWASP Dependency checker and White source bolt tasks which have to be added to Azure Devops from the marketplace
# NB: Variables need to be set up in Azure Devops Variables tab:
#       ApprovalEmailAddresses - email addresses for the approval steps
#       AzureLocation - location of azure data centre e.g. UKWest
#       ServiceConnection - Azure Devops service connection approved to deploy to Azure from Azure Devops
#       ResourceGroup - Name of resource group to deploy to
# Whitesource bolt needs activation to run. See video here: https://bolt.whitesourcesoftware.com/whitesource-bolt-azure-devops#activate (You don't need to select to receive emails)
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger:
  - master

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  ArmTemplateParameterFile: 'WebSite.int.parameters.json'
  Release.EnvironmentName: 'Integration' # This is so the web deployment xml transformation works

stages: 
- stage: Build
  jobs:
  - job: Build
    pool:
      name: Hosted VS2017
      timeoutInMinutes: 180
      demands:
      - msbuild
      - visualstudio
      - vstest
    steps:
    - task: NuGetToolInstaller@1
      displayName: 'Use NuGet 4.4.1'
      inputs:
        versionSpec: 4.4.1
    
    - task: NuGetCommand@2
      displayName: 'Restore NuGet Packages'
      inputs:
        restoreSolution: '$(solution)'
    
    - task: VSBuild@1
      displayName: 'Build solution'
      inputs:
        solution: '$(solution)'
        msbuildArgs: '/p:OutDir=$(build.stagingDirectory) /p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
    
    - task: VSTest@2
      displayName: 'Run Unit tests'
      inputs:
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
        pathtoCustomTestAdapters: '$(build.sourcesdirectory)/packages/NUnit3TestAdapter.3.16.1/build/net35/'
        testAssemblyVer2: |
          **\SecurityEssentials.Unit.Tests.dll
          !**\*TestAdapter.dll
          !**\obj\**'
        searchFolder: '$(build.sourcesdirectory)'
        runInParallel: true
        codeCoverageEnabled: true
        diagnosticsEnabled: True

    - task: dependency-check-build-task@5
      displayName: 'OWASP Dependency Checker'
      inputs:
        projectName: 'Security Essentials'
        scanPath: '$(System.DefaultWorkingDirectory)'
        format: 'HTML'         

    - task: WhiteSource Bolt@20
      displayName: 'Whitesource bolt'
      inputs:
        cwd: '$(System.DefaultWorkingDirectory)'
        
    - task: PublishSymbols@1
      displayName: 'Publish symbols path'
      inputs:
        SearchPattern: '**\bin\**\*.pdb'
    
    - task: CopyFiles@2
      displayName: 'Copy Application Files to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(build.sourcesdirectory)'
        Contents: '**\\bin\\$(BuildConfiguration)\\**'
        TargetFolder: '$(build.artifactstagingdirectory)'
    
    - task: CopyFiles@2
      displayName: 'Copy Test Adapter to $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(build.sourcesdirectory)\packages\NUnit3TestAdapter.3.16.1\'
        TargetFolder: '$(build.artifactstagingdirectory)\Tests\NUnit3TestAdapter.3.16.1\'
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'

- stage: Test
  dependsOn: Build
  jobs:
  #- job: Approve_Deployment
  #  pool: server
  #  steps:
  #  - task: ManualIntervention@8
  #    displayName: 'Approve deployment to test'
  #    inputs:
  #      instructions: 'Ready to deploy to $(Release.EnvironmentName) and run acceptance tests?'
  #      emailRecipients: '$(ApprovalEmailAddresses)'
  - job: Deploy_To_Server
    pool:
      name: Hosted VS2017
      demands:
      - msbuild
      - visualstudio
      - vstest
    steps:
    - task: AzurePowerShell@3
      displayName: 'Pre Deployment'
      inputs:
        azureSubscription: '$(ServiceConnection)'
        ScriptPath: '$(build.sourcesdirectory)\src\Deploy\PreDeploy.ps1'
        ScriptArguments: '-EnvironmentName $(EnvironmentName) -SiteName $(SiteName) -SiteBaseUrl $(SiteBaseUrl) -SubscriptionId $(SubscriptionId) -CloudFlareAuthEmail $(CloudFlareAuthEmail) -CloudFlareUserServiceKey $(CloudFlareUserServiceKey) -CloudFlareZoneName $(CloudFlareZoneName)'
        azurePowerShellVersion: LatestVersion
    - task: AzureResourceGroupDeployment@2
      displayName: 'Deploy Azure Resource Group'
      enabled: false
      inputs:
          azureSubscription: '$(ServiceConnection)'
        resourceGroupName: '$(ResourceGroup)'
        location: '$(AzureLocation)'
        csmFile: '$(build.sourcesdirectory)\src\Deploy\template.json'
        csmParametersFile: '$(build.sourcesdirectory)\src\Deploy\$(ArmTemplateParameterFile)'
        deploymentOutputs: ArmTemplateOutput
    # TODO: Deploy an instance to Azure and then run integration tests against it